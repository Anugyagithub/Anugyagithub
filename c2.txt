# Import necessary libraries
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
from sklearn.datasets import load_iris

# Load the Iris dataset
iris = load_iris()
data = pd.DataFrame(data= np.c_[iris['data'], iris['target']],
                    columns= iris['feature_names'] + ['target'])

# Map target labels to species names for easier interpretation
data['species'] = data['target'].map({0: 'setosa', 1: 'versicolor', 2: 'virginica'})
data.drop('target', axis=1, inplace=True)

# Display the first few rows of the data
print("Data preview:")
print(data.head())

# Data visualization: Pairplot to show relationships
sns.pairplot(data, hue="species", markers=["o", "s", "D"])
plt.suptitle("Iris Data Pairplot by Species", y=1.02)
plt.show()

# Visualize the distribution of each species
plt.figure(figsize=(12, 6))
sns.countplot(x="species", data=data)
plt.title("Species Distribution")
plt.show()

# Split the data into features and target variables
X = data.drop('species', axis=1)
y = data['species']

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize and train the model
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"\nModel Accuracy: {accuracy * 100:.2f}%")

# Classification report
print("\nClassification Report:")
print(classification_report(y_test, y_pred))

# Confusion matrix
conf_matrix = confusion_matrix(y_test, y_pred, labels=['setosa', 'versicolor', 'virginica'])
plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',
            xticklabels=['setosa', 'versicolor', 'virginica'],
            yticklabels=['setosa', 'versicolor', 'virginica'])
plt.ylabel('Actual')
plt.xlabel('Predicted')
plt.title('Confusion Matrix')
plt.show()
